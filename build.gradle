apply plugin: 'maven'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'net.sf.proguard:proguard-gradle:4.10'
    }
}

repositories {
    mavenCentral()
    maven {
        url "https://libraries.minecraft.net/"
    }
}

group = 'common.nw'
archivesBaseName = 'updater'
sourceCompatibility = 1.7

ext {
    updaterVersion = '2.2.1'
    installerVersion = '2.3.1'
    creatorVersion = '2.4.3'
}

dependencies {
    compile 'com.intellij:forms_rt:7.0.3'
    compile 'net.sourceforge.argo:argo:3.7'
    compile 'com.google.guava:guava:14.0'
    compile 'com.google.code.gson:gson:2.2.4'
    compile ('net.minecraft:launchwrapper:1.11') {
        exclude group: 'org.ow2.asm'
    }
    compile 'net.sf.jopt-simple:jopt-simple:4.5'
}

/**
 * Base Jar (without libraries) (-->used as a tweaker when minecraft loads)
 */
jar {
    exclude 'argo/**'
    exclude 'com/intellij/**'
    baseName = 'classes'
}

task thinUpdater(type: Jar) {
    from sourceSets.main.output
    baseName = 'updater'
    version = updaterVersion
    classifier = 'thin'
}

/**
 * Base fat Jar
 */
task fatJar(type: Jar, dependsOn: jar) {
    classifier = 'fat'
    inputs.file jar.archivePath
    from(configurations.compile.collect { zipTree(it) })
}

fatJar.doFirst {
    from zipTree(jar.archivePath)
}

/**
 * Preset Installer (fat)
 */
task presetInstaller(type: Jar, dependsOn: fatJar) {
    baseName = 'installer'
    version = installerVersion
    classifier = 'preset'
    from zipTree(fatJar.archivePath)
    manifest { attributes 'Main-Class': 'common.nw.installer.PrepackedInstall' }
}

/**
 * Installer (fat)
 */
task installer(type: Jar, dependsOn: fatJar) {
    baseName = 'installer'
    version = installerVersion
    from zipTree(fatJar.archivePath)
    manifest { attributes 'Main-Class': 'common.nw.installer.gui.InstallerWindow' }
}

/**
 * Creator (fat)
 */
task creator(type: Jar, dependsOn: fatJar) {
    baseName = 'creator'
    version = creatorVersion
    from zipTree(fatJar.archivePath)
    manifest { attributes 'Main-Class': 'common.nw.creator.gui.CreatorWindow' }
}

/**
 * Executable Updater (fat)
 */
task updater(type: Jar, dependsOn: fatJar) {
    baseName = 'updater'
    version = updaterVersion
    classifier = 'executeable'
    from zipTree(fatJar.archivePath)
    manifest { attributes 'Main-Class': 'common.nw.updater.launch.Launch' }
}

/**
 * Shrunk Jar (Base for artifacts)
 */
task shrinkJar(type: proguard.gradle.ProGuardTask, dependsOn: fatJar) {
    inputs.file fatJar.archivePath
    ext {
        outDir = file("${buildDir}/proguard")
        obfuscatedJar = "${outDir}/${jar.baseName}.jar"
    }
    outDir.mkdirs()

    injars fatJar.archivePath
    outjars obfuscatedJar
    configuration 'proguard.pro'
}

/**
 * Shrunk Creator
 */
task shrinkCreator(type: Jar, dependsOn: shrinkJar) {
    baseName = 'creator'
    version = creatorVersion
    classifier = 'shrunk'
    from zipTree(shrinkJar.obfuscatedJar)
    manifest { attributes 'Main-Class': 'common.nw.creator.gui.CreatorWindow' }
}

/**
 * Shrunk Installer
 */
task shrinkInstaller(type: Jar, dependsOn: shrinkJar) {
    baseName = 'installer'
    version = installerVersion
    classifier = 'shrunk'
    from zipTree(shrinkJar.obfuscatedJar)
    manifest { attributes 'Main-Class': 'common.nw.installer.gui.InstallerWindow' }
}

/**
 * Shrunk Installer (Preset)
 */
task shrinkInstallerPreset(type: Jar, dependsOn: shrinkJar) {
    baseName = 'installer'
    version = installerVersion
    classifier = 'preset-shrunk'
    from zipTree(shrinkJar.obfuscatedJar)
    manifest { attributes 'Main-Class': 'common.nw.installer.PrepackedInstall' }
}

/**
 * Shrunk Updater (executable)
 */
task shrinkUpdater(type: Jar, dependsOn: shrinkJar) {
    baseName = 'updater'
    version = updaterVersion
    classifier = 'executable-shrunk'
    from zipTree(shrinkJar.obfuscatedJar)
    manifest { attributes 'Main-Class': 'common.nw.updater.launch.Launch' }
}
/**
 * Source Code
 */
task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    //create Fat Jars
    archives fatJar
    archives installer
    archives presetInstaller
    archives updater
    archives creator

    //create sources jar
    archives sourcesJar

    //create shrunk Jars
    archives shrinkInstaller
    archives shrinkInstallerPreset
    archives shrinkUpdater
    archives shrinkCreator
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.6'
}