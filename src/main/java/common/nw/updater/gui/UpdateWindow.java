package common.nw.updater.gui;

import common.nw.core.utils.log.NwLogger;

import javax.swing.*;
import java.awt.*;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.File;

/**
 * @author Nuklearwurst
 */
public class UpdateWindow implements IProgressWatcher, WindowListener {


	private JProgressBar pbOverall;
	private JProgressBar pbDownload;
	private JButton btnCancel;
	private JLabel lblOverallProgress;
	private JLabel lblDownloadProgress;
	private JPanel contentPanel;
	private final JFrame frmUpdater;


	private boolean isCancelled = false;
	private boolean isPaused = false;
	private boolean quitToLauncher = false;

	@SuppressWarnings("WeakerAccess")
	public UpdateWindow() {
		frmUpdater = new JFrame();
		frmUpdater.setResizable(false);
		frmUpdater.setTitle("Updater");
		frmUpdater.setBounds(100, 100, 378, 199);
		frmUpdater.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
		frmUpdater.setContentPane(contentPanel);

		btnCancel.addActionListener(arg0 -> cancel());
	}


	@SuppressWarnings("SameParameterValue")
	public void setVisible(boolean b) {
		frmUpdater.setVisible(b);
	}

	private void cancel() {
		isPaused = true;
		String[] options = new String[]{"Quit to launcher", "Continue without updating", "Cancel"};
		int r = JOptionPane.showOptionDialog(frmUpdater, "Are you sure you want to cancel the update process?", "Cancel", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
		if (r == JOptionPane.YES_OPTION) {
			isCancelled = true;
			quitToLauncher = true;
		} else if (r == JOptionPane.NO_OPTION) {
			isCancelled = true;
		}
		isPaused = false;
	}

	public void close() {
		frmUpdater.dispose();
	}

	@Override
	public boolean isCancelled() {
		return isCancelled;
	}

	@Override
	public boolean isPaused() {
		return isPaused;
	}

	@Override
	public boolean quitToLauncher() {
		return quitToLauncher;
	}

	public int showErrorDialog(String title, String message) {
		String[] options = {"Retry", "Quit To Launcher",
				"Continue without updating"};
		return JOptionPane.showOptionDialog(frmUpdater, message, title, JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.ERROR_MESSAGE, null, options, options[0]);
	}

	@Override
	public int showConfirmDialog(String message, String title, int optionType,
	                             int messageType) {
		return JOptionPane.showConfirmDialog(frmUpdater, message, title, optionType, messageType);
	}

	@Override
	public void showMessageDialog(String message, String title, int messageType) {
		JOptionPane.showMessageDialog(frmUpdater, message, title, messageType);
	}

	@Override
	public String showInputDialog(String message) {
		return JOptionPane.showInputDialog(frmUpdater, message);
	}

	@Override
	public int showOptionDialog(String msg, String title, int optionType,
	                            int messageType, Icon icon, String[] options, String defaultOption) {
		return JOptionPane.showOptionDialog(frmUpdater, msg, title, optionType, messageType, icon, options, defaultOption);
	}

	@Override
	public void setDownloadProgress(String msg) {
		NwLogger.UPDATER_LOGGER.info("Download Progress: " + msg);
		lblDownloadProgress.setText(msg);
	}

	@Override
	public void setDownloadProgress(int progress) {
		pbDownload.setValue(progress);
	}

	@Override
	public void setDownloadProgress(String msg, int progress) {
		setDownloadProgress(msg);
		setDownloadProgress(progress);
	}

	@Override
	public void setDownloadProgress(String msg, int progress, int maxProgress) {
		pbDownload.setMaximum(maxProgress);
		setDownloadProgress(msg, progress);
	}

	@Override
	public void setOverallProgress(int progress) {
		pbOverall.setValue(progress);
	}

	@Override
	public void setOverallProgress(String msg, int progress) {
		NwLogger.UPDATER_LOGGER.info("Overall Progress: " + msg + ", @" + progress + "%");
		lblOverallProgress.setText(msg);
		setOverallProgress(progress);
	}

	@Override
	public boolean hasGui() {
		return true;
	}

	@Override
	public Component getGui() {
		return contentPanel;
	}

	@Override
	public File selectFile(String minecraftDir, int mode, String s) {
		JFileChooser fc = new JFileChooser(minecraftDir);
		fc.setFileSelectionMode(mode);
		fc.setDialogTitle(s);
		if (fc.showOpenDialog(frmUpdater) == JFileChooser.APPROVE_OPTION) {
			return fc.getSelectedFile();
		} else {
			return null;
		}
	}

	@Override
	public void show() {
		setVisible(true);
	}

	@Override
	public void windowOpened(WindowEvent e) {
	}

	@Override
	public void windowClosing(WindowEvent e) {
	}

	@Override
	public void windowClosed(WindowEvent e) {
		isCancelled = true;
	}

	@Override
	public void windowIconified(WindowEvent e) {
	}

	@Override
	public void windowDeiconified(WindowEvent e) {
	}

	@Override
	public void windowActivated(WindowEvent e) {
	}

	@Override
	public void windowDeactivated(WindowEvent e) {
	}

	{
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
		$$$setupUI$$$();
	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		contentPanel = new JPanel();
		contentPanel.setLayout(new GridBagLayout());
		contentPanel.setMaximumSize(new Dimension(370, 2147483647));
		contentPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5), null));
		lblOverallProgress = new JLabel();
		lblOverallProgress.setText("Initializing...");
		GridBagConstraints gbc;
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 1;
		gbc.weightx = 1.0;
		contentPanel.add(lblOverallProgress, gbc);
		btnCancel = new JButton();
		btnCancel.setText("Cancel");
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 7;
		gbc.weightx = 1.0;
		contentPanel.add(btnCancel, gbc);
		lblDownloadProgress = new JLabel();
		lblDownloadProgress.setText("Loading...");
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 4;
		gbc.weightx = 1.0;
		contentPanel.add(lblDownloadProgress, gbc);
		pbOverall = new JProgressBar();
		pbOverall.setStringPainted(true);
		pbOverall.setToolTipText("Overall Progress");
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 2;
		gbc.weightx = 1.0;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		contentPanel.add(pbOverall, gbc);
		pbDownload = new JProgressBar();
		pbDownload.setStringPainted(true);
		pbDownload.setToolTipText("Download Progress");
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 5;
		gbc.weightx = 1.0;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		contentPanel.add(pbDownload, gbc);
		final JPanel spacer1 = new JPanel();
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 6;
		gbc.weighty = 1.0;
		gbc.fill = GridBagConstraints.VERTICAL;
		contentPanel.add(spacer1, gbc);
		final JPanel spacer2 = new JPanel();
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 0;
		gbc.weighty = 1.0;
		gbc.fill = GridBagConstraints.VERTICAL;
		contentPanel.add(spacer2, gbc);
		final JPanel spacer3 = new JPanel();
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 3;
		gbc.weighty = 0.1;
		gbc.fill = GridBagConstraints.VERTICAL;
		contentPanel.add(spacer3, gbc);
	}

	/**
	 * @noinspection ALL
	 */
	public JComponent $$$getRootComponent$$$() {
		return contentPanel;
	}
}
