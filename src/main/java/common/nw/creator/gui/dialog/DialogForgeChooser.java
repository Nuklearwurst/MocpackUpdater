package common.nw.creator.gui.dialog;

import argo.jdom.*;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import common.nw.core.modpack.ModpackValues;
import common.nw.core.utils.DownloadHelper;
import common.nw.core.utils.log.NwLogger;

import javax.swing.*;
import java.awt.*;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public class DialogForgeChooser extends JDialog {
	private JPanel contentPane;
	private JButton buttonOK;
	private JButton buttonCancel;
	private JComboBox<String> cmboxMcVersion;
	private JComboBox<String> cmboxForgeVersion;
	private JProgressBar progressBar;

	private JsonRootNode forgeVersionData;
	private Map<JsonStringNode, JsonNode> mcVersion;

	private String lastSelection;
	private String result;

	public DialogForgeChooser(Window window, String lastSelection) {
		super(window);
		this.lastSelection = lastSelection;
		setContentPane(contentPane);
		setModal(true);
		getRootPane().setDefaultButton(buttonOK);


		setMinimumSize(new Dimension(300, 160));
		setBounds(window.getX() + 40, window.getY() + 40, 400, 160);
		setTitle("Select forge version");

		buttonOK.addActionListener(e -> onOK());

		buttonCancel.addActionListener(e -> onCancel());

// call onCancel() when cross is clicked
		setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
		addWindowListener(new WindowAdapter() {
			public void windowClosing(WindowEvent e) {
				onCancel();
			}
		});

// call onCancel() on ESCAPE
		contentPane.registerKeyboardAction(e -> onCancel(), KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);

		cmboxMcVersion.addActionListener(e -> createForgeVersions());

		new DownloadForgeJsonTask().execute();
	}

	public String getResult() {
		return result;
	}

	private void onOK() {
		result = (String) cmboxForgeVersion.getSelectedItem();
		if (result.contains(".") && result.lastIndexOf(".") + 1 < result.length()) {
			result = result.substring(result.lastIndexOf(".") + 1);
		}
		dispose();
	}

	private void onCancel() {
// add your code here if necessary
		dispose();
	}

	private void createMCVersions() {
		try {
			ArrayList<String> versions = new ArrayList<>(mcVersion.size());
			for (JsonStringNode node : mcVersion.keySet()) {
				versions.add(node.getText());
			}
			cmboxMcVersion.setModel(new DefaultComboBoxModel<>(versions.toArray(new String[versions.size()])));
			cmboxMcVersion.setSelectedIndex(cmboxMcVersion.getItemCount() - 1);
			createForgeVersions();
		} catch (Exception e) {
			NwLogger.CREATOR_LOGGER.error("Error reading forge versions!", e);
			onCancel();
		}
	}

	private void createForgeVersions() {
		try {
			List<JsonNode> versions = mcVersion.get(JsonNodeFactories.string((String) cmboxMcVersion.getSelectedItem())).getElements();
			ArrayList<String> forgeVersions = new ArrayList<>(versions.size());
			for (JsonNode node : versions) {
				forgeVersions.add(forgeVersionData.getStringValue("number", node.getText(), "version"));
			}
			cmboxForgeVersion.setModel(new DefaultComboBoxModel<>(forgeVersions.toArray(new String[forgeVersions.size()])));
			cmboxForgeVersion.setSelectedIndex(cmboxForgeVersion.getItemCount() - 1);
		} catch (Exception e) {
			NwLogger.CREATOR_LOGGER.error("Error reading forge versions!", e);
			onCancel();
		}
	}

	{
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
		$$$setupUI$$$();
	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		contentPane = new JPanel();
		contentPane.setLayout(new GridLayoutManager(2, 1, new Insets(10, 10, 10, 10), -1, -1));
		final JPanel panel1 = new JPanel();
		panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
		contentPane.add(panel1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
		final Spacer spacer1 = new Spacer();
		panel1.add(spacer1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
		final JPanel panel2 = new JPanel();
		panel2.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1, true, false));
		panel1.add(panel2, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
		buttonOK = new JButton();
		buttonOK.setText("OK");
		panel2.add(buttonOK, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		buttonCancel = new JButton();
		buttonCancel.setText("Cancel");
		panel2.add(buttonCancel, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final JPanel panel3 = new JPanel();
		panel3.setLayout(new GridLayoutManager(4, 2, new Insets(0, 0, 0, 0), -1, -1));
		contentPane.add(panel3, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
		final JLabel label1 = new JLabel();
		label1.setText("Minecraft Version: ");
		panel3.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final JLabel label2 = new JLabel();
		label2.setText("Forge Version: ");
		panel3.add(label2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		cmboxMcVersion = new JComboBox();
		cmboxMcVersion.setEnabled(false);
		panel3.add(cmboxMcVersion, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		cmboxForgeVersion = new JComboBox();
		cmboxForgeVersion.setEnabled(false);
		panel3.add(cmboxForgeVersion, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		progressBar = new JProgressBar();
		progressBar.setIndeterminate(true);
		panel3.add(progressBar, new GridConstraints(2, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final Spacer spacer2 = new Spacer();
		panel3.add(spacer2, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
		label1.setLabelFor(cmboxMcVersion);
		label2.setLabelFor(cmboxForgeVersion);
	}

	/**
	 * @noinspection ALL
	 */
	public JComponent $$$getRootComponent$$$() {
		return contentPane;
	}

	private class DownloadForgeJsonTask extends SwingWorker<Void, Void> {

		@Override
		protected Void doInBackground() throws Exception {
			//parse as build number
			String s = DownloadHelper.getString(ModpackValues.URL.forgeVersionJson, null);
			if (s != null) {
				try {
					JdomParser forgeParser = new JdomParser();
					forgeVersionData = forgeParser.parse(s);
					mcVersion = forgeVersionData.getObjectNode("mcversion");
					createMCVersions();
					if (lastSelection != null && !lastSelection.isEmpty()) {
						try {
							JsonNode version = forgeVersionData.getNode("number", lastSelection);
							String mcversion = version.getStringValue("mcversion");
							String forgeVersion = version.getStringValue("version");
							cmboxMcVersion.setSelectedItem(mcversion);
							cmboxForgeVersion.setSelectedItem(forgeVersion);
						} catch (Exception e) {
							NwLogger.CREATOR_LOGGER.warn("Could not restore last forge version selection!", e);
						}
					}
					cmboxForgeVersion.setEnabled(true);
					cmboxMcVersion.setEnabled(true);
				} catch (Exception e) {
					NwLogger.CREATOR_LOGGER.error("Error parsing forge version data!", e);
				}
			} else {
				NwLogger.CREATOR_LOGGER.error("Error downloading forge version data!");
			}
			progressBar.setVisible(false);
			return null;
		}
	}

}
